diff --git a/node_modules/react-native-orientation-locker/android/src/main/java/org/wonday/orientation/OrientationModule.java b/node_modules/react-native-orientation-locker/android/src/main/java/org/wonday/orientation/OrientationModule.java
index 9603ab0..78be695 100644
--- a/node_modules/react-native-orientation-locker/android/src/main/java/org/wonday/orientation/OrientationModule.java
+++ b/node_modules/react-native-orientation-locker/android/src/main/java/org/wonday/orientation/OrientationModule.java
@@ -40,8 +40,6 @@ import javax.annotation.Nullable;
 
 public class OrientationModule extends ReactContextBaseJavaModule implements OrientationListeners {
 
-    final BroadcastReceiver mReceiver;
-    final OrientationEventListener mOrientationListener;
     final ReactApplicationContext ctx;
     private boolean isLocked = false;
     private boolean isConfigurationChangeReceiverRegistered = false;
@@ -51,89 +49,6 @@ public class OrientationModule extends ReactContextBaseJavaModule implements Ori
     public OrientationModule(ReactApplicationContext reactContext) {
         super(reactContext);
         ctx = reactContext;
-
-        mOrientationListener = new OrientationEventListener(reactContext, SensorManager.SENSOR_DELAY_UI) {
-
-            @Override
-            public void onOrientationChanged(int orientation) {
-
-                FLog.d(ReactConstants.TAG,"DeviceOrientation changed to " + orientation);
-
-                String deviceOrientationValue = lastDeviceOrientationValue;
-
-
-                if (orientation == -1) {
-                    deviceOrientationValue = "UNKNOWN";
-                } else if (orientation > 355 || orientation < 5) {
-                    deviceOrientationValue = "PORTRAIT";
-                } else if (orientation > 85 && orientation < 95) {
-                    deviceOrientationValue = "LANDSCAPE-RIGHT";
-                } else if (orientation > 175 && orientation < 185) {
-                    deviceOrientationValue = "PORTRAIT-UPSIDEDOWN";
-                } else if (orientation > 265 && orientation < 275) {
-                    deviceOrientationValue = "LANDSCAPE-LEFT";
-                }
-
-                if (!lastDeviceOrientationValue.equals(deviceOrientationValue)) {
-
-                    lastDeviceOrientationValue = deviceOrientationValue;
-
-                    WritableMap params = Arguments.createMap();
-                    params.putString("deviceOrientation", deviceOrientationValue);
-                    if (ctx.hasActiveCatalystInstance()) {
-                        ctx
-                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-                        .emit("deviceOrientationDidChange", params);
-                    }
-                }
-
-                String orientationValue = getCurrentOrientation();
-                if (!lastOrientationValue.equals(orientationValue)) {
-                    lastOrientationValue = orientationValue;
-
-                    FLog.d(ReactConstants.TAG,"Orientation changed to " + orientationValue);
-
-                    WritableMap params = Arguments.createMap();
-                    params.putString("orientation", orientationValue);
-                    if (ctx.hasActiveCatalystInstance()) {
-                        ctx
-                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-                        .emit("orientationDidChange", params);
-                    }
-                }
-
-                return;
-            }
-        };
-
-        if (mOrientationListener.canDetectOrientation()) {
-           FLog.d(ReactConstants.TAG, "orientation detect enabled.");
-           mOrientationListener.enable();
-        } else {
-           FLog.d(ReactConstants.TAG, "orientation detect disabled.");
-           mOrientationListener.disable();
-        }
-
-        mReceiver = new BroadcastReceiver() {
-            @Override
-            public void onReceive(Context context, Intent intent) {
-
-                String orientationValue = getCurrentOrientation();
-                lastOrientationValue = orientationValue;
-
-                FLog.d(ReactConstants.TAG,"Orientation changed to " + orientationValue);
-
-                WritableMap params = Arguments.createMap();
-                params.putString("orientation", orientationValue);
-                if (ctx.hasActiveCatalystInstance()) {
-                    ctx
-                    .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-                    .emit("orientationDidChange", params);
-                }
-
-            }
-        };
-        OrientationActivityLifecycle.getInstance().registerListeners(this);
     }
 
     @Override
@@ -354,43 +269,17 @@ public class OrientationModule extends ReactContextBaseJavaModule implements Ori
     @Override
     public void start() {
         FLog.i(ReactConstants.TAG, "orientation detect enabled.");
-        mOrientationListener.enable();
-        compatRegisterReceiver(ctx, mReceiver, new IntentFilter("onConfigurationChanged"), false);
-        isConfigurationChangeReceiverRegistered = true;
     }
 
     @Override
     public void stop() {
         FLog.d(ReactConstants.TAG, "orientation detect disabled.");
-        mOrientationListener.disable();
-        try {
-            if (isConfigurationChangeReceiverRegistered) {
-                ctx.unregisterReceiver(mReceiver);
-                isConfigurationChangeReceiverRegistered = false;
-            }
-        } catch (Exception e) {
-           FLog.w(ReactConstants.TAG, "Receiver already unregistered", e);
-        }
     }
 
     @Override
     public void release() {
         FLog.d(ReactConstants.TAG, "orientation detect disabled.");
-        mOrientationListener.disable();
-
-        final Activity activity = getCurrentActivity();
-        if (activity == null) return;
-        try
-        {
-            if (isConfigurationChangeReceiverRegistered) {
-                activity.unregisterReceiver(mReceiver);
-                isConfigurationChangeReceiverRegistered = false;
-            }
-        }
-        catch (Exception e) {
-            FLog.w(ReactConstants.TAG, "Receiver already unregistered", e);
         }
-    }
 
     @ReactMethod
     public void addListener(String eventName) {
