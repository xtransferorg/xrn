{"version":3,"file":"buildDepPackages.js","sourceRoot":"","sources":["../src/buildDepPackages.ts"],"names":[],"mappings":"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","sourcesContent":["import { execSync } from \"child_process\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport { PACKAGES_DIR, APPS_DIR } from \"./Constants\";\n\ninterface PackageJson {\n  name: string;\n  dependencies?: Record<string, string>;\n  devDependencies?: Record<string, string>;\n}\n\ntype PackageJsonMap = Record<string, PackageJson>;\n\nconst SKIP_PACKAGES: string[] = [];\n\nfunction getPackageJson(packagePath: string): PackageJson {\n  const packageJsonPath = path.join(packagePath, \"package.json\");\n  if (!fs.existsSync(packageJsonPath)) {\n    throw new Error(`package.json not found in ${packagePath}`);\n  }\n  return JSON.parse(fs.readFileSync(packageJsonPath, \"utf8\"));\n}\n\nfunction getWorkspacePackageJsons(): PackageJsonMap {\n  const packageJsonMap: PackageJsonMap = {};\n  const packages = fs.readdirSync(PACKAGES_DIR);\n  const apps = fs.readdirSync(APPS_DIR);\n\n  for (const pkg of packages) {\n    const packagePath = path.join(PACKAGES_DIR, pkg);\n    if (fs.statSync(packagePath).isDirectory()) {\n      try {\n        const packageJson = getPackageJson(packagePath);\n        packageJsonMap[packageJson.name] = packageJson;\n      } catch (error: any) {\n        console.log(error?.message);\n      }\n    }\n  }\n\n  for (const app of apps) {\n    const appPath = path.join(APPS_DIR, app);\n    if (fs.statSync(appPath).isDirectory()) {\n      try {\n        const packageJson = getPackageJson(appPath);\n        packageJsonMap[packageJson.name] = packageJson;\n      } catch (error: any) {\n        console.log(error?.message);\n      }\n    }\n  }\n\n  return packageJsonMap;\n}\n\nfunction resolveWorkspaceDependencies(\n  packageName: string,\n  packageJsonMap: PackageJsonMap\n): string[] {\n  const visited = new Set<string>();\n  const tempVisited = new Set<string>();\n  const sortedPackages: string[] = [];\n\n  function visit(pkg: string) {\n    if (tempVisited.has(pkg)) {\n      throw new Error(`Circular dependency detected at ${pkg}`);\n    }\n    if (!visited.has(pkg)) {\n      tempVisited.add(pkg);\n\n      const packageJson = packageJsonMap[pkg];\n      if (packageJson) {\n        const dependencies = {\n          ...packageJson.dependencies,\n          ...packageJson.devDependencies,\n        };\n        for (const dep in dependencies) {\n          if (packageJsonMap[dep]) {\n            visit(dep);\n          }\n        }\n      }\n\n      tempVisited.delete(pkg);\n      visited.add(pkg);\n      sortedPackages.push(pkg);\n    }\n  }\n\n  visit(packageName);\n  return sortedPackages;\n}\n\nfunction buildPackage(packageName: string, packageJsonMap: PackageJsonMap) {\n  const sortedPackages = resolveWorkspaceDependencies(\n    packageName,\n    packageJsonMap\n  );\n  console.log(\"Build order:\", sortedPackages);\n\n  for (const pkg of sortedPackages) {\n    const packagePath = path.join(PACKAGES_DIR, pkg);\n    if (SKIP_PACKAGES.includes(pkg) || pkg === packageName) {\n      console.log(`Skipping package: ${pkg}`);\n      continue;\n    }\n    console.log(`Building package: ${pkg}`);\n    try {\n      execSync(\"yarn build\", { cwd: packagePath, stdio: \"inherit\" });\n    } catch (err) {\n      console.error(`Failed to build package: ${pkg}`);\n      //   process.exit(1);\n    }\n  }\n}\n\nexport function buildDepPackages(targetPackage: string) {\n  const packageJsonMap = getWorkspacePackageJsons();\n  if (!packageJsonMap[targetPackage]) {\n    console.error(`Package ${targetPackage} not found in workspace`);\n    process.exit(1);\n  }\n\n  buildPackage(targetPackage, packageJsonMap);\n}\n"]}