{"version":3,"file":"createHarmonyLib.js","sourceRoot":"","sources":["../src/createHarmonyLib.ts"],"names":[],"mappings":";;;;;;AAAA,wDAA0B;AAC1B,kDAA0B;AAC1B,gDAAwB;AAExB,2CAAsC;AAEtC,mCAA+C;AAExC,MAAM,gBAAgB,GAAG,KAAK,EAAE,EACrC,WAAW,EACX,iBAAiB,GACF,EAAE,EAAE;IACnB,MAAM,WAAW,GAAG,MAAM,IAAA,4BAAoB,EAAC,WAAW,CAAC,CAAC;IAC5D,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,CAAC,KAAK,CAAC,WAAW,WAAW,yBAAyB,CAAC,CAAC;QAC/D,OAAO;IACT,CAAC;IACD,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,mBAAO,EAAE,YAAY,CAAC,CAAC;IACnD,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,mBAAO,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC7D,MAAM,qBAAqB,GAAG,cAAI,CAAC,IAAI,CACrC,WAAW,EACX,SAAS,EACT,iBAAiB,CAClB,CAAC;IACF,MAAM,mBAAmB,GAAG,cAAI,CAAC,IAAI,CACnC,SAAS,EACT,SAAS,EACT,iBAAiB,CAClB,CAAC;IAEF,MAAM,uBAAuB,GAAG,cAAI,CAAC,IAAI,CACvC,SAAS,EACT,SAAS,EACT,qBAAqB,CACtB,CAAC;IAEF,IAAI,kBAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE,CAAC;QACvC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IACD,IAAI,CAAC,kBAAE,CAAC,UAAU,CAAC,qBAAqB,CAAC,EAAE,CAAC;QAC1C,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACtD,CAAC;IAED,kBAAE,CAAC,QAAQ,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;IAExD,MAAM,mBAAmB,GAAG,kBAAE,CAAC,YAAY,CAAC,uBAAuB,EAAE,OAAO,CAAC,CAAC;IAC9E,MAAM,YAAY,GAAG,eAAK,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACtD,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC;QACxB,IAAI,EAAE,iBAAiB;QACvB,OAAO,EAAE,KAAK,iBAAiB,EAAE;KAClC,CAAC,CAAC;IAEH,kBAAE,CAAC,aAAa,CACd,uBAAuB,EACvB,eAAK,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CACvC,CAAC;IAEF,OAAO,CAAC,GAAG,CAAC,eAAe,iBAAiB,mBAAmB,CAAC,CAAC;AAEnE,CAAC,CAAC;AAnDW,QAAA,gBAAgB,oBAmD3B","sourcesContent":["import fs from \"fs-extra\";\nimport json5 from \"json5\";\nimport path from \"path\";\n\nimport { XRN_DIR } from \"./Constants\";\nimport { HarmonyLibInfo } from \"./types\";\nimport { findWorkspacePackage } from \"./utils\";\n\nexport const createHarmonyLib = async ({\n  packageName,\n  harmonyModuleName,\n}: HarmonyLibInfo) => {\n  const packageInfo = await findWorkspacePackage(packageName);\n  if (!packageInfo) {\n    console.error(`Package ${packageName} not found in workspace`);\n    return;\n  }\n  const xrngoPath = path.join(XRN_DIR, \"apps/xrngo\");\n  const packagePath = path.join(XRN_DIR, packageInfo.location);\n  const packageHarmonyLibPath = path.join(\n    packagePath,\n    \"harmony\",\n    harmonyModuleName\n  );\n  const xrngoHarmonyLibPath = path.join(\n    xrngoPath,\n    \"harmony\",\n    harmonyModuleName\n  );\n\n  const harmonyBuildProfilePath = path.join(\n    xrngoPath,\n    \"harmony\",\n    \"build-profile.json5\"\n  );\n\n  if (fs.existsSync(xrngoHarmonyLibPath)) {\n    throw new Error(\"Harmony lib already exists\");\n  }\n  if (!fs.existsSync(packageHarmonyLibPath)) {\n    throw new Error(\"Harmony lib not found in package\");\n  }\n\n  fs.copySync(packageHarmonyLibPath, xrngoHarmonyLibPath);\n\n  const buildProfileContent = fs.readFileSync(harmonyBuildProfilePath, \"utf-8\");\n  const buildProfile = json5.parse(buildProfileContent);\n  buildProfile.modules.push({\n    name: harmonyModuleName,\n    srcPath: `./${harmonyModuleName}`,\n  });\n\n  fs.writeFileSync(\n    harmonyBuildProfilePath,\n    json5.stringify(buildProfile, null, 2)\n  );\n\n  console.log(`Harmony lib ${harmonyModuleName} created in xrngo`);\n\n};\n"]}