{"version":3,"file":"xrn-tools.js","sourceRoot":"","sources":["../src/xrn-tools.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/order */\n// import spawnAsync from \"@expo/spawn-async\"; // 不知道为啥，删了会有ts报错\nimport { Command } from \"commander\";\n\nimport { addDemoScreenToXrnGo } from \"./addDemoScreenToXrnGo\";\nimport { addLibToOhEntryDep } from \"./addLibToOhEntryDep\";\nimport { buildDepPackages } from \"./buildDepPackages\";\nimport { copyOhLibToPackage } from \"./copyOhLibToPackage\";\nimport { createHarmonyLib } from \"./createHarmonyLib\";\nimport { generateApiData } from \"./generateApiData\";\nimport { generateApiDoc } from \"./generateApiDoc\";\nimport {\n  syncAllDependenciesAcrossWorkspaces,\n  syncDependencyVersionAcrossWorkspaces,\n} from \"./syncDeps\";\nimport { GenerateApiDataOptions, AddLibToOhEntryDep } from \"./types\";\nimport { choosePackage, execAsync, getWorkspacePackages } from \"./utils\";\nimport { syncScreensToPackages } from \"./syncScreensToPackages\";\nimport { generateScreensApiDoc } from \"./generateScreensApiDoc\";\nimport { publishPackage } from \"./publishPackage\";\nimport { batchPublish } from \"./batchPublish\";\nimport { Package } from \"./utils/PackageUtils\";\n\nconst packageJson = require(\"../package.json\");\n\nconst program = new Command();\n\nprogram\n  .name(packageJson.name)\n  .version(packageJson.version)\n  .description(packageJson.description);\n\nprogram\n  .command(\"generate-api-data\")\n  .alias(\"gdad\")\n  .argument(\"<packageName>\", \"The package name to generate API data for.\")\n  .option(\n    \"-e, --entry-point <entryPoint>\",\n    \"The entry point to generate API data for.\"\n  )\n  .option(\"-s, --sdk <version>\", \"将数据输出路径设置为具体的 SDK 版本\")\n  .description(`Extract API data JSON files for docs using TypeDoc.`)\n  .action((argv: string, options: GenerateApiDataOptions) => {\n    console.log(\"Generating API data for package:\", { argv, options });\n    options.packageName = argv;\n    generateApiData(options);\n  });\n\nprogram\n  .command(\"generate-api-doc\")\n  .alias(\"gdoc\")\n  .argument(\"<packageName>\", \"The package name to generate API data for.\")\n  .option(\n    \"-e, --entry-point <entryPoint>\",\n    \"The entry point to generate API data for.\"\n  )\n  .option(\"-s, --sdk <version>\", \"将数据输出路径设置为具体的 SDK 版本\")\n  .description(`Extract API data JSON files for docs using TypeDoc.`)\n  .action((argv: string, options: GenerateApiDataOptions) => {\n    console.log(\"Generating API data for package:\", { argv, options });\n    options.packageName = argv;\n    generateApiDoc(options);\n  });\n\nprogram\n  .command(\"add-demo-screen-to-xrngo\")\n  .argument(\"<packageName>\", \"The package name to install.\")\n  .description(`在xrngo中添加一个 demo screen`)\n  .action((packageName: string) => {\n    addDemoScreenToXrnGo({ packageName });\n  });\n\nprogram\n  .command(\"create-harmony-lib\")\n  .argument(\"<packageName>\", \"npm 包名\")\n  .argument(\"<harmonyModuleName>\", \"鸿蒙模块名\")\n  .description(`以及npm包中的代码，在xrngo中添加一个鸿蒙的二方库`)\n  .action((packageName: string, harmonyModuleName: string) => {\n    const options = { packageName, harmonyModuleName };\n    console.log(\"create-harmony-lib\", options);\n    createHarmonyLib(options);\n  });\n\nprogram\n  .command(\"copy-oh-lib-to-package\")\n  .argument(\"<packageName>\", \"npm 包名\")\n  .argument(\"<harmonyModuleName>\", \"鸿蒙模块名\")\n  .description(`将 xrngo 中的鸿蒙二方库复制到指定的 npm 包中`)\n  .action((packageName: string, harmonyModuleName: string) => {\n    const options = { packageName, harmonyModuleName };\n    console.log(\"copy-oh-lib-to-package\", options);\n    copyOhLibToPackage(options);\n  });\n\nprogram\n  .command(\"add-lib-to-oh-entry-dep\")\n  .argument(\"<packageName>\", \"npm 包名\")\n  .argument(\"<harmonyModuleName>\", \"鸿蒙模块名\")\n  .option(\"--source-code\", \"使用源码\", false)\n  .description(`将二方包依赖中的har包添加到xrngo entry的oh-package.json5中`)\n  .action(\n    (\n      packageName: string,\n      harmonyModuleName: string,\n      options: AddLibToOhEntryDep\n    ) => {\n      Object.assign(options, { packageName, harmonyModuleName });\n      // const options = { packageName, harmonyModuleName };\n      console.log(\"add-lib-to-oh-entry-dep\", options);\n      addLibToOhEntryDep(options);\n    }\n  );\n\nprogram\n  .command(\"build-dep-packages\")\n  .argument(\"<packageName>\", \"npm 包名\")\n  .description(`打包依赖包`)\n  .action((packageName: string) => {\n    buildDepPackages(packageName);\n  });\n\nprogram\n  .command(\"sync-all-dep-version\")\n  .description(`同步所有依赖版本`)\n  .action(async () => {\n    syncAllDependenciesAcrossWorkspaces();\n  });\n\nprogram\n  .command(\"sync-dep-version\")\n  .argument(\"<packageName>\", \"npm 包名\")\n  .description(`同步单个依赖版本`)\n  .action(async (packageName: string) => {\n    syncDependencyVersionAcrossWorkspaces(packageName);\n  });\n\nprogram\n  .command(\"select-sync-dep-version\")\n  .description(`选择一个包，同步单个依赖版本`)\n  .action(async () => {\n    const { name } = await choosePackage();\n    syncDependencyVersionAcrossWorkspaces(name);\n  });\n\nprogram\n  .command(\"sync-screens-to-packages\")\n  .description(\"将 screens.json 中的配置同步到对应包的 package.json 中\")\n  .action(async () => {\n    await syncScreensToPackages();\n  });\n\nprogram\n  .command(\"generate-screens-api-doc\")\n  .alias(\"gsad\")\n  .option(\"-s, --sdk <version>\", \"将数据输出路径设置为具体的 SDK 版本\")\n  .description(\"为 screens.json 中的所有包生成 API 文档\")\n  .action(async (options: GenerateApiDataOptions) => {\n    await generateScreensApiDoc(options.sdk);\n  });\n\nprogram\n  .command(\"publish\")\n  .argument(\"<packageName>\", \"要发布的 npm 包名\")\n  .option(\"-b, --beta\", \"是否发布 beta 版本\", false)\n  .description(\"发布单个 npm 包，支持发布正式版和 beta 版\")\n  .action(async (packageName: string, options: { beta: boolean }) => {\n    await publishPackage({ packageName, isBeta: options.beta });\n  });\n\nprogram\n  .command(\"batch-publish\")\n  .argument(\"<packages...>\", \"要发布的包名列表\")\n  .option(\"-b, --beta\", \"是否发布 beta 版本\", false)\n  .description(\n    \"批量发布指定的 npm 包，支持发布正式版和 beta 版，会自动处理依赖顺序\"\n  )\n  .action(async (packages: string[], options: { beta: boolean }) => {\n    await batchPublish({ packages, beta: options.beta });\n  });\n\nprogram\n  .command(\"list-xrn-meta\")\n  .alias(\"lxm\")\n  .description(\"列出所有包的 XrnMeta 信息\")\n  .action(async () => {\n    const metaList = Package.getXrnMetaList();\n    console.log(JSON.stringify(metaList, null, 2));\n  });\n\nprogram\n  .command(\"list-beta-packages\")\n  .description(\"显示所有非正式版包\")\n  .action(async () => {\n    const { Package } = require(\"./utils/PackageUtils\");\n    // 筛选所有非正式版包\n    const betaPackages = Package.getPackages().filter((pkg) =>\n      /-/.test(pkg.version)\n    );\n    if (betaPackages.length === 0) {\n      console.log(\"没有需要升级的非正式版包\");\n      return;\n    }\n    const names = betaPackages.map((pkg) => pkg.name).join(\",\");\n    console.log(\"非正式版包列表: \", names);\n  });\n\nprogram\n  .command(\"promote-beta-to-release\")\n  .description(\"将所有非正式版（beta/alpha/rc等）包升级为 patch 正式版\")\n  .action(async () => {\n    const { Package } = require(\"./utils/PackageUtils\");\n    // 筛选所有非正式版包\n    const betaPackages = Package.getPackages().filter((pkg) =>\n      /-/.test(pkg.version)\n    );\n    if (betaPackages.length === 0) {\n      console.log(\"没有需要升级的非正式版包\");\n      return;\n    }\n    const names = betaPackages.map((pkg) => pkg.name).join(\",\");\n    const cmd = `npx lerna version patch --no-push --no-private --force-publish=${names} --yes`;\n    console.log(\"执行命令:\", cmd);\n    const { execSync } = require(\"child_process\");\n    try {\n      execSync(cmd, { stdio: \"inherit\" });\n    } catch (e) {\n      console.error(\"lerna version 执行失败\", e);\n    }\n  });\n\nprogram\n  .command(\"install\")\n  .description(\"安装所有包的依赖\")\n  .action(async () => {\n    const packages = await getWorkspacePackages();\n    console.log(\"当前工作区的包列表：\", packages);\n    const result = await execAsync(`git rev-parse --abbrev-ref HEAD`);\n    const { stdout } = result;\n    const branch = stdout.trim();\n    console.log(\"当前分支是：\", branch);\n    console.log('result', result);\n    await execAsync(\"yarn install --no-immutable\", { stdio: \"inherit\" });\n  });\n\nprogram.parse(process.argv);\n"]}