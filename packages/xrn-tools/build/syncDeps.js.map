{"version":3,"file":"syncDeps.js","sourceRoot":"","sources":["../src/syncDeps.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { XRN_DIR } from \"./Constants\";\nimport { findWorkspacePackage, getWorkspacePackages } from \"./utils\";\n\nconst SKIP_PACKAGES: string[] = [];\n\n// 读取 JSON 文件辅助函数\nconst readJSON = (filePath: string): any => {\n  return JSON.parse(fs.readFileSync(filePath, \"utf8\"));\n};\n\n// 写入 JSON 文件辅助函数\nconst writeJSON = (filePath: string, data: any) => {\n  fs.writeFileSync(filePath, JSON.stringify(data, null, 2) + \"\\n\", \"utf8\");\n};\n\n// 需要更新的依赖字段\nconst dependencyFields: (\n  | \"dependencies\"\n  | \"devDependencies\"\n  | \"peerDependencies\"\n)[] = [\"dependencies\", \"devDependencies\"];\n\n/**\n * 公共方法：更新 package.json 中的依赖版本\n *\n * @param pkgData 包的 package.json 对象\n * @param getTargetVersion 根据依赖名称返回目标版本（如果有的话）\n * @param pkgName 包名（用于日志打印）\n * @returns 是否有修改\n */\nconst updateDependenciesWithTargetVersion = (\n  pkgData: any,\n  getTargetVersion: (depName: string) => string | undefined,\n  pkgName: string\n): boolean => {\n  let modified = false;\n  dependencyFields.forEach((field) => {\n    if (pkgData[field]) {\n      Object.keys(pkgData[field]).forEach((dep) => {\n        const targetVersion = getTargetVersion(dep);\n        if (targetVersion && pkgData[field][dep] !== targetVersion) {\n          console.log(\n            `更新 ${pkgName} 中的 ${dep} 依赖版本: ${pkgData[field][dep]} -> ${targetVersion}`\n          );\n          pkgData[field][dep] = targetVersion;\n          modified = true;\n        }\n      });\n    }\n  });\n  return modified;\n};\n\n/**\n * 同步工作区中所有包对某个依赖的版本\n *\n * @param targetDepName 目标依赖的名称\n */\nexport const syncDependencyVersionAcrossWorkspaces = async (\n  targetDepName: string\n) => {\n  const _packages = await getWorkspacePackages();\n  const packages = _packages.filter((pkg) => !SKIP_PACKAGES.includes(pkg.name));\n\n  const targetDepPackageInfo = await findWorkspacePackage(targetDepName);\n  if (!targetDepPackageInfo) {\n    console.error(`未找到依赖包 ${targetDepName}`);\n    return;\n  }\n\n  // 获取目标依赖包的版本（取自 node_modules 中的安装版本）\n  const targetDepPackageJsonPath = path.join(\n    XRN_DIR,\n    targetDepPackageInfo.location,\n    \"package.json\"\n  );\n  if (!fs.existsSync(targetDepPackageJsonPath)) {\n    console.error(`未找到依赖包 ${targetDepName} 的 package.json 文件`);\n    return;\n  }\n  const targetDepPackage = readJSON(targetDepPackageJsonPath);\n  const targetDepVersion = targetDepPackage.version;\n\n  // 定义获取目标依赖版本的函数\n  const getTargetVersion = (depName: string) => {\n    if (depName === targetDepName) {\n      return targetDepVersion;\n    }\n    return undefined;\n  };\n\n  // 遍历所有工作区包，同步该依赖的版本\n  packages.forEach((pkg) => {\n    const packageJsonPath = path.join(XRN_DIR, pkg.location, \"package.json\");\n    if (!fs.existsSync(packageJsonPath)) return;\n    const pkgData = readJSON(packageJsonPath);\n\n    const modified = updateDependenciesWithTargetVersion(\n      pkgData,\n      getTargetVersion,\n      pkg.name\n    );\n    if (modified) {\n      writeJSON(packageJsonPath, pkgData);\n    }\n  });\n\n  console.log(\n    `所有工作区中对 ${targetDepName} 的依赖已更新为版本 ${targetDepVersion}`\n  );\n\n  // 新增：同步 apps/*/package.json 里的 targetDepName 依赖\n  const appsDir = path.join(XRN_DIR, \"apps\");\n  const appDirs = fs.readdirSync(appsDir).filter((d) => {\n    const stat = fs.statSync(path.join(appsDir, d));\n    return stat.isDirectory();\n  });\n  appDirs.forEach((appName) => {\n    const appPkgJson = path.join(appsDir, appName, \"package.json\");\n    if (!fs.existsSync(appPkgJson)) return;\n    const pkgData = readJSON(appPkgJson);\n    const modified = updateDependenciesWithTargetVersion(\n      pkgData,\n      (depName) => (depName === targetDepName ? targetDepVersion : undefined),\n      pkgData.name\n    );\n    if (modified) {\n      writeJSON(appPkgJson, pkgData);\n      console.log(`已同步 apps/${appName}/package.json 的 ${targetDepName} 依赖版本`);\n    }\n  });\n};\n\n/**\n * 同步工作区中所有包的依赖版本\n * 如果依赖项在工作区中存在，则更新为工作区中的版本\n */\nexport const syncAllDependenciesAcrossWorkspaces = async () => {\n  const _packages = await getWorkspacePackages();\n  const packages = _packages.filter((pkg) => !SKIP_PACKAGES.includes(pkg.name));\n\n  // 构建一个映射：工作区包名称 -> 工作区包版本\n  const workspaceVersions: Record<string, string> = {};\n  packages.forEach((pkg) => {\n    const packageJsonPath = path.join(XRN_DIR, pkg.location, \"package.json\");\n    if (fs.existsSync(packageJsonPath)) {\n      const pkgData = readJSON(packageJsonPath);\n      workspaceVersions[pkg.name] = pkgData.version;\n    }\n  });\n\n  // 定义获取依赖目标版本的函数（如果依赖是工作区中的包，则返回对应版本）\n  const getTargetVersion = (depName: string) => {\n    return workspaceVersions[depName];\n  };\n\n  // 遍历所有工作区包，更新依赖项版本\n  packages.forEach((pkg) => {\n    const packageJsonPath = path.join(XRN_DIR, pkg.location, \"package.json\");\n    if (!fs.existsSync(packageJsonPath)) return;\n    const pkgData = readJSON(packageJsonPath);\n\n    const modified = updateDependenciesWithTargetVersion(\n      pkgData,\n      getTargetVersion,\n      pkg.name\n    );\n    if (modified) {\n      writeJSON(packageJsonPath, pkgData);\n    }\n  });\n\n  console.log(\"所有工作区中的依赖版本已同步完成\");\n\n  // 新增：同步 apps/*/package.json 里的依赖\n  const appsDir = path.join(XRN_DIR, \"apps\");\n  const appDirs = fs.readdirSync(appsDir).filter((d) => {\n    const stat = fs.statSync(path.join(appsDir, d));\n    return stat.isDirectory();\n  });\n  appDirs.forEach((appName) => {\n    const appPkgJson = path.join(appsDir, appName, \"package.json\");\n    if (!fs.existsSync(appPkgJson)) return;\n    const pkgData = readJSON(appPkgJson);\n    const modified = updateDependenciesWithTargetVersion(\n      pkgData,\n      (depName) => workspaceVersions[depName],\n      pkgData.name\n    );\n    if (modified) {\n      writeJSON(appPkgJson, pkgData);\n      console.log(`已同步 apps/${appName}/package.json 的依赖版本`);\n    }\n  });\n};\n"]}