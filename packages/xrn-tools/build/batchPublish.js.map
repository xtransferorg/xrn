{"version":3,"file":"batchPublish.js","sourceRoot":"","sources":["../src/batchPublish.ts"],"names":[],"mappings":"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","sourcesContent":["import path from \"path\";\n\nimport { publishPackage } from \"./publishPackage\";\nimport { sendDingTalkNotification } from \"./utils\";\nimport { Package } from \"./utils/PackageUtils\";\n\ninterface BatchPublishOptions {\n  beta?: boolean;\n  packages: string[];\n}\n\ninterface PackageInfo {\n  name: string;\n  path: string;\n  dependencies: string[];\n  devDependencies: string[];\n}\n\nasync function getPackageInfo(pkgName: string): Promise<PackageInfo> {\n  const rootDir = process.cwd();\n  const scanPaths = [\"packages\", \"templates\", \"apps\"];\n\n  for (const scanPath of scanPaths) {\n    const pkgPath = path.join(rootDir, scanPath, pkgName, \"package.json\");\n    try {\n      const packageJson = require(pkgPath);\n      return {\n        name: packageJson.name,\n        path: path.dirname(pkgPath),\n        dependencies: Object.keys(packageJson.dependencies || {}),\n        devDependencies: Object.keys(packageJson.devDependencies || {}),\n      };\n    } catch (err) {\n      continue;\n    }\n  }\n\n  throw new Error(`找不到包 ${pkgName}`);\n}\n\nfunction sortPackagesByDependencies(packages: PackageInfo[]): PackageInfo[] {\n  const visited = new Set<string>();\n  const sorted: PackageInfo[] = [];\n\n  function visit(pkg: PackageInfo) {\n    if (visited.has(pkg.name)) return;\n    visited.add(pkg.name);\n\n    // 获取所有依赖（包括 devDependencies）\n    const allDeps = [...pkg.dependencies, ...pkg.devDependencies];\n\n    // 先处理所有依赖\n    for (const dep of allDeps) {\n      const depPkg = packages.find((p) => p.name === dep);\n      if (depPkg && !visited.has(depPkg.name)) {\n        visit(depPkg);\n      }\n    }\n\n    sorted.push(pkg);\n  }\n\n  // 从每个包开始遍历\n  for (const pkg of packages) {\n    if (!visited.has(pkg.name)) {\n      visit(pkg);\n    }\n  }\n\n  return sorted;\n}\n\nexport async function batchPublish({\n  beta = false,\n  packages,\n}: BatchPublishOptions) {\n  try {\n    // 获取所有包信息\n    const packageInfos = await Promise.all(\n      packages.map((pkgName) => getPackageInfo(pkgName))\n    );\n\n    // 按依赖顺序排序包\n    const sortedPackages = sortPackagesByDependencies(packageInfos);\n\n    console.log(\"发布顺序：\", sortedPackages.map((p) => p.name).join(\" -> \"));\n\n    // 依次发布每个包\n    for (const pkg of sortedPackages) {\n      console.log(`\\n开始发布 ${pkg.name}...`);\n      try {\n        await publishPackage({ packageName: pkg.name, isBeta: beta });\n        console.log(`${pkg.name} 发布成功`);\n\n        // 发送钉钉通知\n        const version = new Package(pkg.name).version;\n        await sendDingTalkNotification(`${pkg.name}@${version}`);\n      } catch (err) {\n        const error = err as Error;\n        console.error(`发布 ${pkg.name} 失败:`, error);\n        throw error;\n      }\n    }\n\n    console.log(\"\\n所有包发布完成！\");\n  } catch (err) {\n    const error = err as Error;\n    console.error(\"批量发布失败:\", error);\n    process.exit(1);\n  }\n} \n"]}