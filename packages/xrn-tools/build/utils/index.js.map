{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/utils/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/order */\nimport { execSync } from \"child_process\";\nimport path from \"path\";\nimport inquirer from \"inquirer\";\nimport fs from \"fs\";\n\nimport { XRN_DIR } from \"../Constants\";\nimport { DocNavigation, NavSDK } from \"../docConstants\";\nconst execShPromise = require(\"exec-sh\").promise;\n\nexport const execAsync = (\n  command,\n  opts: { stdio: \"inherit\" | null } = { stdio: null },\n): Promise<{ stdout: string; stderr: string }> => {\n  console.log(\"执行命令:\", command);\n  return execShPromise(command, {\n    ...opts,\n  });\n};\n\nexport const generateDocsStaticResources = () => {\n  const DOCS_DIR = path.join(XRN_DIR, \"docs\");\n  execSync(`yarn generate-static-resources`, { cwd: DOCS_DIR });\n};\n\ninterface PackageInfo {\n  location: string;\n  name: string;\n}\n\nexport const getWorkspacePackages = async () => {\n  const res = await execAsync(`yarn workspaces list --json`);\n  const { stdout } = res;\n  const packages = stdout\n    .split(\"\\n\")\n    .filter(Boolean)\n    .map((it) => {\n      try {\n        return JSON.parse(it) as PackageInfo;\n      } catch (error) {\n        console.error(error);\n        return null;\n      }\n    })\n    .filter(Boolean);\n  return packages as PackageInfo[];\n};\n\nexport const findWorkspacePackage = async (packageName: string) => {\n  const packages = await getWorkspacePackages();\n  return packages.find((it) => it.name === packageName);\n};\n\nexport const getPackageJsonByName = async (packageName: string) => {\n  const packageInfo = await findWorkspacePackage(packageName);\n  if (!packageInfo) {\n    return null;\n  }\n  const packageJsonPath = path.join(\n    XRN_DIR,\n    packageInfo.location,\n    \"package.json\",\n  );\n  const currentPackageJson = JSON.parse(\n    fs.readFileSync(packageJsonPath, \"utf-8\"),\n  );\n  return currentPackageJson as { name: string; version: string };\n};\n\n// 让用户选择一个二方包\nexport const choosePackage = async (): Promise<PackageInfo> => {\n  // 获取工作区中所有的包\n  const packages = (await getWorkspacePackages()).filter(\n    (pkg) => pkg.name.startsWith(\"xt-rn\") || pkg.name.startsWith(\"xrn-\"),\n  );\n\n  // 通过 inquirer 提示用户选择一个包\n  const { selectedPackage } = await inquirer.prompt([\n    {\n      type: \"list\",\n      name: \"selectedPackage\",\n      message: \"请选择一个二方包：\",\n      choices: packages.map((pkg) => ({\n        name: `${pkg.name} (${pkg.location})`,\n        value: pkg,\n      })),\n    },\n  ]);\n\n  return selectedPackage;\n};\n\nexport const readDocConstantsFile = (filename: string) => {\n  return JSON.parse(\n    fs.readFileSync(path.join(XRN_DIR, \"docs\", \"constants\", filename), \"utf-8\"),\n  ) as DocNavigation;\n};\n\nexport const createNewNavigation = async () => {\n  const { name } = await inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"name\",\n      message: \"请输入新导航的名称:\",\n      validate: (input: string) => {\n        if (!input.trim()) {\n          return \"名称不能为空\";\n        }\n        return true;\n      },\n    },\n  ]);\n\n  const { directory } = await inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"directory\",\n      message: \"请输入新导航的目录名:\",\n      validate: (input: string) => {\n        if (!input.trim()) {\n          return \"目录名不能为空\";\n        }\n        if (!/^[a-zA-Z0-9-_]+$/.test(input)) {\n          return \"目录名只能包含字母、数字、下划线和横线\";\n        }\n        return true;\n      },\n    },\n  ]);\n\n  const newNavigation: NavSDK = { name, directory };\n  const configPath = path.join(\n    XRN_DIR,\n    \"docs\",\n    \"constants\",\n    \"navigation-config.json\",\n  );\n\n  const config: DocNavigation = readDocConstantsFile(\"navigation-config.json\");\n  config.sdk = [...config.sdk, newNavigation];\n  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n\n  return newNavigation;\n};\n\nexport const chooseApiType = async (): Promise<string> => {\n  const navigationConfig = readDocConstantsFile(\"navigation-config.json\");\n  let choices = navigationConfig.sdk.map((it) => ({\n    name: it.name,\n    value: it.directory,\n  }));\n\n  // 添加创建新导航选项\n  choices = [...choices, { name: \"+ 创建新导航\", value: \"CREATE_NEW\" }];\n\n  const { selectedDir } = await inquirer.prompt([\n    {\n      type: \"list\",\n      name: \"selectedDir\",\n      message: \"请选择API类型:\",\n      choices,\n    },\n  ]);\n\n  if (selectedDir === \"CREATE_NEW\") {\n    const newNavigation = await createNewNavigation();\n    return newNavigation.directory;\n  }\n\n  return selectedDir;\n};\n\nexport async function sendDingTalkNotification(message: string) {\n  console.log(\"sendDingTalkNotification\", message);\n}\n"]}