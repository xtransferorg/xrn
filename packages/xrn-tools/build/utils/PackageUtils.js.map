{"version":3,"file":"PackageUtils.js","sourceRoot":"","sources":["../../src/utils/PackageUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs-extra\";\nimport path from \"path\";\n\nimport { execAsync } from \".\";\nimport { PACKAGES_DIR } from \"../Constants\";\nimport { PackageJson, XrnMeta } from \"./types\";\n\nexport class Package {\n  name: string;\n  version: string;\n  packageJsonPath: string;\n  packageJson: PackageJson;\n\n  constructor(name: string) {\n    this.name = name;\n    const packageJsonPath = path.join(PACKAGES_DIR, this.name, \"package.json\");\n    this.packageJsonPath = packageJsonPath;\n    const packageJson = this.getPackageJson();\n    this.version = packageJson.version;\n    this.packageJson = packageJson;\n  }\n\n  getPackageJson(): PackageJson {\n    return fs.readJsonSync(this.packageJsonPath);\n  }\n\n  writePackageJson() {\n    fs.writeJson(this.packageJsonPath, this.packageJson, {\n      spaces: 2,\n    });\n  }\n\n  getXrnMeta() {\n    return this.packageJson.xrnMeta;\n  }\n\n  updateFromScreen(screen: XrnMeta) {\n    this.packageJson.description = screen.description;\n    this.packageJson.homepage = screen.sdkPath\n      ? `https://xtransferorg.github.io/xrn/versions/latest/sdk/${screen.sdkPath}`\n      : undefined;\n    this.packageJson.xrnMeta = screen;\n  }\n\n  async installPackage(packageName: string) {\n    await execAsync(`yarn workspace ${this.name} add ${packageName}`);\n  }\n\n  async installTo(targetPackageName: string) {\n    await execAsync(\n      `yarn workspace ${targetPackageName} add ${this.name}@${this.version}`\n    );\n  }\n\n  async installToXrnGo() {\n    await this.installTo(\"xrngo\");\n  }\n\n  async installToXrnGoMain() {\n    await this.installTo(\"xrngo-main\");\n  }\n\n  async installToXtRnCore() {\n    await this.installTo(\"xt-rn-core\");\n  }\n\n  static fromPackageName(packageName: string): Package | null {\n    const packagePath = path.join(PACKAGES_DIR, packageName, \"package.json\");\n    if (!fs.existsSync(packagePath)) {\n      return null;\n    }\n    return new Package(packageName);\n  }\n\n  static getPackages(): Package[] {\n    const packages = fs.readdirSync(PACKAGES_DIR);\n    return packages\n      .filter((packageName) => {\n        const packagePath = path.join(\n          PACKAGES_DIR,\n          packageName,\n          \"package.json\"\n        );\n        return fs.existsSync(packagePath);\n      })\n      .map((packageName) => new Package(packageName))\n      .filter((it) => !it.packageJson.private);\n  }\n\n  static getPackagesWithXrnMeta(): Package[] {\n    return this.getPackages().filter((it) => it.getXrnMeta());\n  }\n\n  static getXrnMetaList(): XrnMeta[] {\n    return this.getPackagesWithXrnMeta().map((it) =>\n      it.getXrnMeta()\n    ) as XrnMeta[];\n  }\n}\n"]}