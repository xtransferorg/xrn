{"version":3,"file":"Screen.js","sourceRoot":"","sources":["../../src/utils/Screen.ts"],"names":[],"mappings":"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","sourcesContent":["import fsExtra from \"fs-extra\";\nimport path from \"path\";\nimport ejs from \"ejs\";\n\nimport { Package } from \"./PackageUtils\";\nimport { APPS_DIR, TOOLS_TEMPLATES_DIR } from \"../Constants\";\nimport { XrnMeta } from \"./types\";\n\nexport class Screen {\n  xrnMeta: XrnMeta;\n\n  constructor(xrnMeta: XrnMeta) {\n    this.xrnMeta = xrnMeta;\n  }\n\n  getScreenPath() {\n    return path.join(\n      APPS_DIR,\n      \"xrngo-main/src/screens\",\n      `${this.xrnMeta.name}Screen.tsx`\n    );\n  }\n\n  getScreenFileContent() {\n    const screenPath = this.getScreenPath();\n    if (!fsExtra.existsSync(screenPath)) {\n      console.warn(`文件不存在：${screenPath}`);\n      return \"\";\n    }\n    return fsExtra.readFileSync(screenPath, \"utf-8\");\n  }\n\n  async genScreenFileContent() {\n    const templatePath = path.join(TOOLS_TEMPLATES_DIR, \"screen.ejs\");\n    const template = await fsExtra.readFile(templatePath, \"utf-8\");\n    return ejs.render(template, {\n      name: this.xrnMeta.name,\n      title: this.xrnMeta.title,\n    });\n  }\n\n  async writeScreenFile() {\n    const screenPath = this.getScreenPath();\n    const screenFileContent = await this.genScreenFileContent();\n    await fsExtra.writeFile(screenPath, screenFileContent);\n  }\n}\n\nexport class ScreenList {\n  screens: Screen[];\n\n  constructor(screens: Screen[]) {\n    this.screens = screens;\n  }\n\n  static create() {\n    const screensPath = path.join(APPS_DIR, \"xrngo-main/screens.json\");\n    const screensData = fsExtra.readJsonSync(screensPath, \"utf-8\");\n\n    return new ScreenList(\n      screensData.map((screenData: XrnMeta) => new Screen(screenData))\n    );\n  }\n\n  getScreensDirPath() {\n    return path.join(APPS_DIR, \"xrngo-main/src/screens\");\n  }\n\n  getScreensJsonPath() {\n    return path.join(APPS_DIR, \"xrngo-main/screens.json\");\n  }\n\n  getNavigationScreensPath() {\n    return path.join(APPS_DIR, \"xrngo-main/src/navigation/Screens.tsx\");\n  }\n\n  static loadFromJson(): Screen[] {\n    const screensPath = path.join(APPS_DIR, \"xrngo-main/screens.json\");\n    const screensData = fsExtra.readJsonSync(screensPath, \"utf-8\");\n    return screensData.map((screenData: XrnMeta) => new Screen(screenData));\n  }\n\n  async addPackageToScreenJson(pkg: Package) {\n    if (this.screens.some((item) => item.xrnMeta.name === pkg.name)) {\n      console.log(`配置中已存在项：${pkg.name}`);\n      return;\n    }\n\n    const newItem = pkg.getXrnMeta();\n\n    if (!newItem) {\n      console.error(`Package ${pkg.name} 没有 xrnMeta`);\n      return;\n    }\n\n    this.screens.push(new Screen(newItem));\n    await fsExtra.writeJson(\n      this.getScreensJsonPath(),\n      this.screens.map((item) => item.xrnMeta),\n      {\n        spaces: 2,\n      }\n    );\n    console.log(`成功添加项：${JSON.stringify(newItem, null, 2)}`);\n  }\n\n  async generateNavigationScreens() {\n    const templatePath = path.join(TOOLS_TEMPLATES_DIR, \"navigation.ejs\");\n    const template = await fsExtra.readFile(templatePath, \"utf-8\");\n    const tsContent = ejs.render(template, { screens: this.screens });\n\n    await fsExtra.writeFile(\n      this.getNavigationScreensPath(),\n      tsContent,\n      \"utf-8\"\n    );\n    console.log(\"成功生成导航配置文件\");\n  }\n\n  async generateScreenFiles() {\n    const screensDir = this.getScreensDirPath();\n    fsExtra.ensureDirSync(screensDir);\n\n    for (const screen of this.screens) {\n      const screenPath = screen.getScreenPath();\n\n      if (fsExtra.existsSync(screenPath)) {\n        console.log(`文件已存在：${screenPath}`);\n        continue;\n      }\n\n      await screen.writeScreenFile();\n      console.log(`成功生成文件：${screenPath}`);\n    }\n  }\n}\n"]}