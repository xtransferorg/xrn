diff --git a/node_modules/react-native/Libraries/Blob/FileReader.js b/node_modules/react-native/Libraries/Blob/FileReader.js
index 3e20afe..c47cfdf 100644
--- a/node_modules/react-native/Libraries/Blob/FileReader.js
+++ b/node_modules/react-native/Libraries/Blob/FileReader.js
@@ -10,6 +10,7 @@
 
 import type Blob from './Blob';
 
+import Platform from '../Utilities/Platform';
 import NativeFileReaderModule from './NativeFileReaderModule';
 import {toByteArray} from 'base64-js';
 
@@ -142,6 +143,12 @@ class FileReader extends (EventTarget(...READER_EVENTS): any) {
       );
     }
 
+    if (!blob.data && Platform.OS === 'android') {
+      throw new TypeError(
+        "Failed to execute 'readAsText' on 'FileReader': 'Blob.data' is null " + blob,
+      );
+    }
+
     NativeFileReaderModule.readAsText(blob.data, encoding).then(
       (text: string) => {
         if (this._aborted) {
diff --git a/node_modules/react-native/Libraries/ReactNative/AppRegistry.js b/node_modules/react-native/Libraries/ReactNative/AppRegistry.js
index af3fa3a..2ffe3b5 100644
--- a/node_modules/react-native/Libraries/ReactNative/AppRegistry.js
+++ b/node_modules/react-native/Libraries/ReactNative/AppRegistry.js
@@ -202,6 +202,13 @@ const AppRegistry = {
         () => msg,
       );
     }
+
+    if (!runnables[appKey] || !runnables[appKey].run) {
+      if (appParameters) {
+        appParameters.appKey = appKey;
+      }
+      appKey = "xt-app-404"
+    }
     invariant(
       runnables[appKey] && runnables[appKey].run,
       `"${appKey}" has not been registered. This can happen if:\n` +
diff --git a/node_modules/react-native/index.js b/node_modules/react-native/index.js
index 7149c64..6939b48 100644
--- a/node_modules/react-native/index.js
+++ b/node_modules/react-native/index.js
@@ -380,43 +380,15 @@ module.exports = {
   },
   // Deprecated Prop Types
   get ColorPropType(): $FlowFixMe {
-    console.error(
-      'ColorPropType will be removed from React Native, along with all ' +
-        'other PropTypes. We recommend that you migrate away from PropTypes ' +
-        'and switch to a type system like TypeScript. If you need to ' +
-        'continue using ColorPropType, migrate to the ' +
-        "'deprecated-react-native-prop-types' package.",
-    );
     return require('deprecated-react-native-prop-types').ColorPropType;
   },
   get EdgeInsetsPropType(): $FlowFixMe {
-    console.error(
-      'EdgeInsetsPropType will be removed from React Native, along with all ' +
-        'other PropTypes. We recommend that you migrate away from PropTypes ' +
-        'and switch to a type system like TypeScript. If you need to ' +
-        'continue using EdgeInsetsPropType, migrate to the ' +
-        "'deprecated-react-native-prop-types' package.",
-    );
     return require('deprecated-react-native-prop-types').EdgeInsetsPropType;
   },
   get PointPropType(): $FlowFixMe {
-    console.error(
-      'PointPropType will be removed from React Native, along with all ' +
-        'other PropTypes. We recommend that you migrate away from PropTypes ' +
-        'and switch to a type system like TypeScript. If you need to ' +
-        'continue using PointPropType, migrate to the ' +
-        "'deprecated-react-native-prop-types' package.",
-    );
     return require('deprecated-react-native-prop-types').PointPropType;
   },
   get ViewPropTypes(): $FlowFixMe {
-    console.error(
-      'ViewPropTypes will be removed from React Native, along with all ' +
-        'other PropTypes. We recommend that you migrate away from PropTypes ' +
-        'and switch to a type system like TypeScript. If you need to ' +
-        'continue using ViewPropTypes, migrate to the ' +
-        "'deprecated-react-native-prop-types' package.",
-    );
     return require('deprecated-react-native-prop-types').ViewPropTypes;
   },
 };
